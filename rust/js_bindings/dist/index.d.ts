/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** PropertyType enum wrapper */
export interface PropertyType {
  type_name: string
}

/** DbSchemaProperty represents a property definition in the schema */
export interface DbSchemaProperty {
  name: string
  neo4j_type: string
  enum_values?: Array<string>
  min_value?: number
  max_value?: number
  distinct_value_count?: number
  example_values?: Array<string>
}

/** DbSchemaRelationshipPattern represents a relationship pattern in the schema */
export interface DbSchemaRelationshipPattern {
  start: string
  end: string
  rel_type: string
}

/** DbSchema represents the complete database schema */
export interface DbSchema {
  node_props: Record<string, Array<DbSchemaProperty>>
  rel_props: Record<string, Array<DbSchemaProperty>>
  relationships: Array<DbSchemaRelationshipPattern>
}

/** Structured error categories for detailed error reporting */
export interface StructuredErrorCategories {
  schema_errors: Array<string>
  property_errors: Array<string>
  syntax_errors: Array<string>
  type_errors: Array<string>
  parsing_errors: Array<string>
}

/** Structured errors for LLM-optimized feedback */
export interface StructuredErrors {
  has_errors: boolean
  error_count: number
  categories: StructuredErrorCategories
  query: string
  suggestions: Array<string>
}

/**
 * Validate a Cypher query against a schema.
 * 
 * @param query - The Cypher query string to validate
 * @param schemaJson - JSON schema string 
 * @returns True if the query is valid according to the schema
 * @throws Error if validation fails due to schema violations or parsing errors
 */
export declare function validateCypher(query: string, schemaJson: string): boolean

/**
 * Get all validation errors for a Cypher query against a schema.
 * 
 * @param query - The Cypher query string to validate
 * @param schemaJson - JSON schema string
 * @returns Array of validation error messages. Empty array if query is valid.
 */
export declare function getValidationErrors(query: string, schemaJson: string): Array<string>

/**
 * Fast validation check - returns true if query is valid, false if it has any errors.
 * Optimized for validation loops where you only need to know if the query is valid.
 * 
 * @param query - The Cypher query string to validate
 * @param schemaJson - JSON schema string
 * @returns True if query is completely valid, false if it has any validation or parsing errors
 */
export declare function hasValidCypher(query: string, schemaJson: string): boolean

/**
 * Get structured validation errors optimized for LLM feedback.
 * Returns categorized error information to help LLMs generate better corrections.
 * 
 * @param query - The Cypher query string to validate
 * @param schemaJson - JSON schema string
 * @returns Structured error information with categories and suggestions
 */
export declare function getStructuredErrors(query: string, schemaJson: string): StructuredErrors

/**
 * Parse a Cypher query into an Abstract Syntax Tree (AST).
 * 
 * @param query - The Cypher query string to parse
 * @returns The parsed AST as a JavaScript object (currently returns empty object)
 * @throws Error if the query has syntax errors and cannot be parsed
 */
export declare function parseQuery(query: string): object

/**
 * Create a new DbSchema from a JSON string
 * 
 * @param jsonStr - JSON string representing the schema
 * @returns DbSchema object
 */
export declare function dbSchemaFromJsonString(jsonStr: string): DbSchema

/**
 * Create a new empty DbSchema
 * 
 * @returns Empty DbSchema object
 */
export declare function dbSchemaNew(): DbSchema

/**
 * Check if a schema has a specific label
 * 
 * @param schema - The DbSchema object
 * @param label - Label to check for
 * @returns True if the label exists in the schema
 */
export declare function dbSchemaHasLabel(schema: DbSchema, label: string): boolean

/**
 * Check if a schema has a specific node property
 * 
 * @param schema - The DbSchema object
 * @param label - Node label
 * @param property - Property name to check for
 * @returns True if the property exists on the label
 */
export declare function dbSchemaHasNodeProperty(schema: DbSchema, label: string, property: string): boolean

/**
 * Create a new DbSchemaProperty
 * 
 * @param name - Property name
 * @param neo4jType - Property type (STRING, INTEGER, etc.)
 * @returns DbSchemaProperty object
 */
export declare function dbSchemaPropertyNew(name: string, neo4jType: string): DbSchemaProperty

/**
 * Create a new DbSchemaRelationshipPattern
 * 
 * @param start - Start node label
 * @param end - End node label
 * @param relType - Relationship type
 * @returns DbSchemaRelationshipPattern object
 */
export declare function dbSchemaRelationshipPatternNew(start: string, end: string, relType: string): DbSchemaRelationshipPattern