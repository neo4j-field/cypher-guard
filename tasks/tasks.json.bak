{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Rust Project Repository",
      "description": "Initialize a new Rust project with Cargo, set up basic directory structure, and add initial dependencies (e.g., serde, serde_json, PyO3, maturin).",
      "details": "Run `cargo new cypher-guard`. Add dependencies to Cargo.toml. Set up src/lib.rs and src/main.rs. Initialize a README and .gitignore.",
      "testStrategy": "Verify project builds with `cargo build` and runs basic tests.",
      "priority": "high",
      "dependencies": [],
      "status": "in-progress",
      "subtasks": [
        {
          "id": 1,
          "title": "Initialize Rust Project with Cargo",
          "description": "Create a new Rust project named 'cypher-guard' using Cargo and set up the basic project structure.",
          "dependencies": [],
          "details": "Run `cargo new cypher-guard --lib` to create a library project. This will generate the initial project structure with Cargo.toml, src/lib.rs, and .gitignore. Then create src/main.rs manually for the binary component of the project.",
          "status": "pending",
          "testStrategy": "Verify the project structure is created correctly and that `cargo build` succeeds without errors."
        },
        {
          "id": 2,
          "title": "Configure Project Dependencies",
          "description": "Add and configure all required dependencies in the Cargo.toml file, including serialization libraries and Python bindings.",
          "dependencies": [
            1
          ],
          "details": "Edit Cargo.toml to add the following dependencies: serde with derive feature, serde_json for JSON serialization, PyO3 for Python bindings, and maturin for building Python packages. Include version specifications for each dependency. Also set up appropriate crate type configurations for library usage.",
          "status": "pending",
          "testStrategy": "Run `cargo check` to verify dependencies resolve correctly without conflicts."
        },
        {
          "id": 3,
          "title": "Create Project Documentation",
          "description": "Set up comprehensive documentation for the project including README.md with usage instructions and project overview.",
          "dependencies": [
            1
          ],
          "details": "Create a README.md file with sections for: project description, installation instructions, usage examples, and contribution guidelines. Include information about the purpose of the cypher-guard library and how it integrates with both Rust and Python projects.",
          "status": "pending",
          "testStrategy": "Review the documentation for completeness and clarity. Ensure all installation steps are accurate."
        },
        {
          "id": 4,
          "title": "Implement Basic Library Structure",
          "description": "Set up the foundational code structure in src/lib.rs with module declarations and public API definitions.",
          "dependencies": [
            2
          ],
          "details": "In src/lib.rs, define the module structure for the project. Create placeholder functions and types that will form the public API. If using PyO3, add the necessary module and function annotations for Python exports. Implement basic error types and result wrappers that will be used throughout the codebase.",
          "status": "pending",
          "testStrategy": "Write simple unit tests for the API structure to ensure it compiles correctly and exports the expected functions."
        },
        {
          "id": 5,
          "title": "Configure Version Control and CI Setup",
          "description": "Enhance the .gitignore file and set up initial continuous integration configuration.",
          "dependencies": [
            1,
            3
          ],
          "details": "Expand the default .gitignore to include project-specific patterns like build artifacts, IDE files, and Python-specific ignores if using PyO3. Create a basic CI configuration file (e.g., for GitHub Actions) that builds the project, runs tests, and checks formatting. Initialize the git repository with `git init` and make an initial commit with the project structure.",
          "status": "pending",
          "testStrategy": "Verify that appropriate files are ignored by git and that the CI configuration passes with the initial codebase."
        }
      ]
    },
    {
      "id": 2,
      "title": "Define DbSchema Struct and Enums",
      "description": "Define the DbSchema struct to represent labels, relationship types, properties, and enums as specified in the PRD.",
      "details": "Create a struct in Rust with fields for labels (Vec<String>), relTypes (Vec<String>), properties (HashMap<String, PropertyType>), and enums (as needed). Use serde for serialization.",
      "testStrategy": "Unit test struct creation, field access, and serialization/deserialization.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Implement Schema Loading from JSON",
      "description": "Implement functionality to load DbSchema from a JSON file using serde_json.",
      "details": "Add a function `load_schema(path: &str) -> Result<DbSchema, Error>`. Use serde_json to parse the file into the DbSchema struct.",
      "testStrategy": "Test with valid and invalid JSON files. Verify schema fields are populated correctly.",
      "priority": "medium",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement Cypher Syntax Validation Function",
      "description": "Implement a Rust function to validate the syntax of a Cypher query string.",
      "details": "Create `validate_syntax(query: &str) -> Result<(), ValidationError>`. Use a parser (e.g., ANTLR, or a Rust Cypher parser if available) to check for syntax errors.",
      "testStrategy": "Unit test with valid and invalid Cypher queries. Ensure all syntax errors are caught.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Implement Node Label Validation",
      "description": "Implement a function to validate node labels in a Cypher query against the loaded schema.",
      "details": "Create `validate_node_label(schema: &DbSchema, label: &str) -> Result<(), ValidationError>`. Check if the label exists in the schema.",
      "testStrategy": "Test with valid and invalid labels. Ensure only schema-defined labels pass.",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement Relationship Type Validation",
      "description": "Implement a function to validate relationship types in a Cypher query against the loaded schema.",
      "details": "Create `validate_relationship_type(schema: &DbSchema, rel_type: &str) -> Result<(), ValidationError>`. Check if the relationship type exists in the schema.",
      "testStrategy": "Test with valid and invalid relationship types. Ensure only schema-defined types pass.",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Implement Property Existence Validation",
      "description": "Implement a function to validate property existence in a Cypher query against the loaded schema.",
      "details": "Create `validate_property_exists(schema: &DbSchema, label_or_rel: &str, prop: &str) -> Result<(), ValidationError>`. Check if the property is defined for the given label or relationship type.",
      "testStrategy": "Test with valid and invalid properties. Ensure only schema-defined properties pass.",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Build CLI Binary for Cypher Validation",
      "description": "Create a CLI tool that reads Cypher queries from stdin and validates them using the implemented functions.",
      "details": "Use clap or similar for CLI argument parsing. Read input from stdin, validate using the core functions, and output results.",
      "testStrategy": "Test with various input queries. Verify correct validation output and error messages.",
      "priority": "medium",
      "dependencies": [
        4,
        5,
        6,
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Expose Python Binding via PyO3 and Maturin",
      "description": "Expose the core validation functions as a Python module using PyO3 and maturin.",
      "details": "Add PyO3 and maturin to dependencies. Create a Python module exposing `validate_query(query: str, schema_path: str) -> bool`. Build and publish the module.",
      "testStrategy": "Test Python module with valid and invalid queries. Ensure results match Rust implementation.",
      "priority": "medium",
      "dependencies": [
        4,
        5,
        6,
        7
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}